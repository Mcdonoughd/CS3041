<?xml version="1.0" encoding="UTF-8"?>

<unix>
    <command id = "ac" Section="8">
        <description>Print statistics about users' connect time</description>
        <tutorial>ac prints out a report of connect time (in hours) based on the
            logins/logouts in the current wtmp file.  A total is also printed
            out.

            The accounting file wtmp is maintained by init(8) and login(1).
            Neither ac nor login creates the wtmp if it doesn't exist, no
            accounting is done.  To begin accounting, create the file with a
            length of zero.

            NOTE:  The wtmp file can get really big, really fast.  You might want
            to trim it every once and a while.

            GNU ac works nearly the same u*x ac, though it's a little smarter in
            several ways.  You should therefore expect differences in the output
            of GNU ac and the output of ac's on other systems.  Use the command
            info accounting to get additional information.
            OPTIONS         top

            -d, --daily-totals
            Print totals for each day rather than just one big total at
            the end.  The output looks like this:
            Jul  3  total     1.17
            Jul  4  total     2.10
            Jul  5  total     8.23
            Jul  6  total     2.10
            Jul  7  total     0.30
            -p, --individual-totals
            Print time totals for each user in addition to the usual
            everything-lumped-into-one value.  It looks like:
            bob       8.06
            goff      0.60
            maley     7.37
            root      0.12
            total    16.15
            people Print out the sum total of the connect time used by all of the
            users included in people.  Note that people is a space
            separated list of valid user names; wildcards are not allowed.
            -f, --file filename
            Read from the file filename instead of the system's wtmp file.
            --complain
            When the wtmp file has a problem (a time-warp, missing record,
            or whatever), print out an appropriate error.
            --reboots
            Reboot records are NOT written at the time of a reboot, but
            when the system restarts; therefore, it is impossible to know
            exactly when the reboot occurred.  Users may have been logged
            into the system at the time of the reboot, and many ac's
            automatically count the time between the login and the reboot
            record against the user (even though all of that time
            shouldn't be, perhaps, if the system is down for a long time,
            for instance).  If you want to count this time, include the
            flag.  *For vanilla ac compatibility, include this flag.*
            --supplants
            Sometimes, a logout record is not written for a specific
            terminal, so the time that the last user accrued cannot be
            calculated.  If you want to include the time from the user's
            login to the next login on the terminal (though probably
            incorrect), include this you want to include the time from the
            user's login to the next login on the terminal (though
            probably incorrect), include this flag.  *For vanilla ac
            compatibility, include this flag.*
            --timewarps
            Sometimes, entries in a wtmp file will suddenly jump back into
            the past without a clock change record occurring.  It is
            impossible to know how long a user was logged in when this
            occurs.  If you want to count the time between the login and
            the time warp against the user, include this flag.  *For
            vanilla ac compatibility, include this flag.*
            --compatibility
            This is shorthand for typing out the three above options.
            -a, --all-days
            If we're printing daily totals, print a record for every day
            instead of skipping intervening days where there is no login
            activity.  Without this flag, time accrued during those
            intervening days gets listed under the next day where there is
            login activity.
            --tw-leniency num
            Set the time warp leniency to num seconds.  Records in wtmp
            files might be slightly out of order (most notably when two
            logins occur within a one-second period - the second one gets
            written first).  By default, this value is set to 60.  If the
            program notices this problem, time is not assigned to users
            unless the --timewarps flag is used.
            --tw-suspicious num
            Set the time warp suspicious value to num seconds.  If two
            records in the wtmp file are farther than this number of
            seconds apart, there is a problem with the wtmp file (or your
            machine hasn't been used in a year).  If the program notices
            this problem, time is not assigned to users unless the
            --timewarps flag is used.
            -y, --print-year
            Print year when displaying dates.
            -z, --print-zeros
            If a total for any category (save the grand total) is zero,
            print it.  The default is to suppress printing.
            --debug
            Print verbose internal information.
            -V, --version
            Print the version number of ac to standard output and quit.
            -h, --help
            Prints the usage string and default locations of system files
            to standard output and exits.</tutorial>
    </command>
    <command id = "man" Section="1">
        <description>An interface to the on-line reference manuals</description>
        <tutorial>man is the system's manual pager.  Each page argument given to man is
            normally the name of a program, utility or function.  The manual page
            associated with each of these arguments is then found and displayed.
            A section, if provided, will direct man to look only in that section
            of the manual.  The default action is to search in all of the
            available sections following a pre-defined order ("1 n l 8 3 2 5 4 9
            6 7" by default, unless overridden by the SECTION directive in
            /usr/local/etc/man_db.conf), and to show only the first page found,
            even if page exists in several sections.

            The table below shows the section numbers of the manual followed by
            the types of pages they contain.

            1   Executable programs or shell commands
            2   System calls (functions provided by the kernel)
            3   Library calls (functions within program libraries)
            4   Special files (usually found in /dev)
            5   File formats and conventions eg /etc/passwd
            6   Games
            7   Miscellaneous (including macro packages and conventions), e.g.
            man(7), groff(7)
            8   System administration commands (usually only for root)
            9   Kernel routines [Non standard]

            A manual page consists of several sections.

            Conventional section names include NAME, SYNOPSIS, CONFIGURATION,
            DESCRIPTION, OPTIONS, EXIT STATUS, RETURN VALUE, ERRORS, ENVIRONMENT,
            FILES, VERSIONS, CONFORMING TO, NOTES, BUGS, EXAMPLE, AUTHORS, and
            SEE ALSO.

            The following conventions apply to the SYNOPSIS section and can be
            used as a guide in other sections.

            bold text          type exactly as shown.
            italic text        replace with appropriate argument.
            [-abc]             any or all arguments within [ ] are optional.
            -a|-b              options delimited by | cannot be used together.

            argument ...       argument is repeatable.
            [expression] ...   entire expression within [ ] is repeatable.

            Exact rendering may vary depending on the output device.  For
            instance, man will usually not be able to render italics when running
            in a terminal, and will typically use underlined or coloured text
            instead.

            The command or function illustration is a pattern that should match
            all possible invocations.  In some cases it is advisable to
            illustrate several exclusive invocations as is shown in the SYNOPSIS
            section of this manual page.</tutorial>
    </command>
    <command id="CCISS" Section="4">
        <description>cciss is a block driver for older HP Smart Array RAID controllers</description>
        <tutorial>.
            cciss_allow_hpsa=1: This option prevents the cciss driver from
            attempting to drive any controllers that the hpsa(4) driver is
            capable of controlling, which is to say, the cciss driver is
            restricted by this option to the following controllers:

            Smart Array 5300
            Smart Array 5i
            Smart Array 532
            Smart Array 5312
            Smart Array 641
            Smart Array 642
            Smart Array 6400
            Smart Array 6400 EM
            Smart Array 6i
            Smart Array P600
            Smart Array P400i
            Smart Array E200i
            Smart Array E200
            Smart Array E200i
            Smart Array E200i
            Smart Array E200i
            Smart Array E500

            Supported hardware
            The cciss driver supports the following Smart Array boards:

            Smart Array 5300
            Smart Array 5i
            Smart Array 532
            Smart Array 5312
            Smart Array 641
            Smart Array 642
            Smart Array 6400
            Smart Array 6400 U320 Expansion Module
            Smart Array 6i
            Smart Array P600
            Smart Array P800
            Smart Array E400
            Smart Array P400i
            Smart Array E200
            Smart Array E200i
            Smart Array E500
            Smart Array P700m
            Smart Array P212
            Smart Array P410
            Smart Array P410i
            Smart Array P411
            Smart Array P812
            Smart Array P712m
            Smart Array P711m

            Configuration details
            To configure HP Smart Array controllers, use the HP Array
            Configuration Utility (either hpacuxe(8) or hpacucli(8)) or the
            Offline ROM-based Configuration Utility (ORCA) run from the Smart
            Array's option ROM at boot time.
            FILES         top

            Device nodes
            The device naming scheme is as follows:

            Major numbers:

            104     cciss0
            105     cciss1
            106     cciss2
            105     cciss3
            108     cciss4
            109     cciss5
            110     cciss6
            111     cciss7

            Minor numbers:

            b7 b6 b5 b4 b3 b2 b1 b0
            |----+----| |----+----|
            |           |
            |           +-------- Partition ID (0=wholedev, 1-15 partition)
            |
            +-------------------- Logical Volume number

            The device naming scheme is:

            /dev/cciss/c0d0         Controller 0, disk 0, whole device
            /dev/cciss/c0d0p1       Controller 0, disk 0, partition 1
            /dev/cciss/c0d0p2       Controller 0, disk 0, partition 2
            /dev/cciss/c0d0p3       Controller 0, disk 0, partition 3

            /dev/cciss/c1d1         Controller 1, disk 1, whole device
            /dev/cciss/c1d1p1       Controller 1, disk 1, partition 1
            /dev/cciss/c1d1p2       Controller 1, disk 1, partition 2
            /dev/cciss/c1d1p3       Controller 1, disk 1, partition 3

            Files in /proc
            The files /proc/driver/cciss/cciss[0-9]+ contain information about
            the configuration of each controller.  For example:

            $ cd /proc/driver/cciss
            $ ls -l
            total 0
            -rw-r--r-- 1 root root 0 2010-09-10 10:38 cciss0
            -rw-r--r-- 1 root root 0 2010-09-10 10:38 cciss1
            -rw-r--r-- 1 root root 0 2010-09-10 10:38 cciss2
            $ cat cciss2
            cciss2: HP Smart Array P800 Controller
            Board ID: 0x3223103c
            Firmware Version: 7.14
            IRQ: 16
            Logical drives: 1
            Current Q depth: 0
            Current # commands on controller: 0
            Max Q depth since init: 1
            Max # commands on controller since init: 2
            Max SG entries since init: 32
            Sequential access devices: 0

            cciss/c2d0:   36.38GB       RAID 0

            Files in /sys
            /sys/bus/pci/devices//ccissX/cXdY/model
            Displays the SCSI INQUIRY page 0 model for logical drive Y of
            controller X.

            /sys/bus/pci/devices//ccissX/cXdY/rev
            Displays the SCSI INQUIRY page 0 revision for logical drive Y
            of controller X.

            /sys/bus/pci/devices//ccissX/cXdY/unique_id
            Displays the SCSI INQUIRY page 83 serial number for logical
            drive Y of controller X.

            /sys/bus/pci/devices//ccissX/cXdY/vendor
            Displays the SCSI INQUIRY page 0 vendor for logical drive Y of
            controller X.

            /sys/bus/pci/devices//ccissX/cXdY/block:cciss!cXdY
            A symbolic link to /sys/block/cciss!cXdY.

            /sys/bus/pci/devices//ccissX/rescan
            When this file is written to, the driver rescans the
            controller to discover any new, removed, or modified logical
            drives.

            /sys/bus/pci/devices//ccissX/resettable
            A value of 1 displayed in this file indicates that the
            "reset_devices=1" kernel parameter (used by kdump) is honored
            by this controller.  A value of 0 indicates that the
            "reset_devices=1" kernel parameter will not be honored.  Some
            models of Smart Array are not able to honor this parameter.

            /sys/bus/pci/devices//ccissX/cXdY/lunid
            Displays the 8-byte LUN ID used to address logical drive Y of
            controller X.

            /sys/bus/pci/devices//ccissX/cXdY/raid_level
            Displays the RAID level of logical drive Y of controller X.

            /sys/bus/pci/devices//ccissX/cXdY/usage_count
            Displays the usage count (number of opens) of logical drive Y
            of controller X.

            SCSI tape drive and medium changer support
            SCSI sequential access devices and medium changer devices are
            supported and appropriate device nodes are automatically created
            (e.g., /dev/st0, /dev/st1, etc.; see st(4) for more details.)  You
            must enable "SCSI tape drive support for Smart Array 5xxx" and "SCSI
            support" in your kernel configuration to be able to use SCSI tape
            drives with your Smart Array 5xxx controller.

            Additionally, note that the driver will not engage the SCSI core at
            init time.  The driver must be directed to dynamically engage the
            SCSI core via the /proc filesystem entry, which the "block" side of
            the driver creates as /proc/driver/cciss/cciss* at run time.  This is
            because at driver init time, the SCSI core may not yet be initialized
            (because the driver is a block driver) and attempting to register it
            with the SCSI core in such a case would cause a hang.  This is best
            done via an initialization script (typically in /etc/init.d, but
            could vary depending on distribution).  For example:

            for x in /proc/driver/cciss/cciss[0-9]*
            do
            echo "engage scsi" > $x
            done

            Once the SCSI core is engaged by the driver, it cannot be disengaged
            (except by unloading the driver, if it happens to be linked as a
            module.)

            Note also that if no sequential access devices or medium changers are
            detected, the SCSI core will not be engaged by the action of the
            above script.

            Hot plug support for SCSI tape drives
            Hot plugging of SCSI tape drives is supported, with some caveats.
            The cciss driver must be informed that changes to the SCSI bus have
            been made.  This may be done via the /proc filesystem.  For example:

            echo "rescan" > /proc/scsi/cciss0/1

            This causes the driver to:

            1. query the adapter about changes to the physical SCSI buses
            and/or fibre channel arbitrated loop, and

            2. make note of any new or removed sequential access devices
            or medium changers.

            The driver will output messages indicating which devices have been
            added or removed and the controller, bus, target, and lun used to
            address each device.  The driver then notifies the SCSI midlayer of
            these changes.

            Note that the naming convention of the /proc filesystem entries
            contains a number in addition to the driver name (e.g., "cciss0"
            instead of just "cciss", which you might expect).

            Note: Only sequential access devices and medium changers are
            presented as SCSI devices to the SCSI midlayer by the cciss driver.
            Specifically, physical SCSI disk drives are not presented to the SCSI
            midlayer.  The only disk devices that are presented to the kernel are
            logical drives that the array controller constructs from regions on
            the physical drives.  The logical drives are presented to the block
            layer (not to the SCSI midlayer).  It is important for the driver to
            prevent the kernel from accessing the physical drives directly, since
            these drives are used by the array controller to construct the
            logical drives.

            SCSI error handling for tape drives and medium changers
            The Linux SCSI midlayer provides an error-handling protocol that is
            initiated whenever a SCSI command fails to complete within a certain
            amount of time (which can vary depending on the command).  The cciss
            driver participates in this protocol to some extent.  The normal
            protocol is a four-step process:

            *  First, the device is told to abort the command.

            *  If that doesn't work, the device is reset.

            *  If that doesn't work, the SCSI bus is reset.

            *  If that doesn't work, the host bus adapter is reset.

            The cciss driver is a block driver as well as a SCSI driver and only
            the tape drives and medium changers are presented to the SCSI
            midlayer.  Furthermore, unlike more straightforward SCSI drivers,
            disk I/O continues through the block side during the SCSI error-
            recovery process.  Therefore, the cciss driver implements only the
            first two of these actions, aborting the command, and resetting the
            device.  Note also that most tape drives will not oblige in aborting
            commands, and sometimes it appears they will not even obey a reset
            command, though in most circumstances they will.  If the command
            cannot be aborted and the device cannot be reset, the device will be
            set offline.

            In the event that the error-handling code is triggered and a tape
            drive is successfully reset or the tardy command is successfully
            aborted, the tape drive may still not allow I/O to continue until
            some command is issued that positions the tape to a known position.
            Typically you must rewind the tape (by issuing mt -f /dev/st0 rewind
            for example) before I/O can proceed again to a tape drive that was
            reset.</tutorial>
    </command>
    <command id = "accept" Section="3">
        <description>Accept a new connection on a socket </description>
        <tutorial>The accept() function shall extract the first connection on the queue
            of pending connections, create a new socket with the same socket type
            protocol and address family as the specified socket, and allocate a
            new file descriptor for that socket.

            The accept() function takes the following arguments:

            socket      Specifies a socket that was created with socket(), has
            been bound to an address with bind(), and has issued a
            successful call to listen().

            address     Either a null pointer, or a pointer to a sockaddr
            structure where the address of the connecting socket
            shall be returned.

            address_len Either a null pointer, if address is a null pointer, or a
            pointer to a socklen_t object which on input specifies
            the length of the supplied sockaddr structure, and on
            output specifies the length of the stored address.

            If address is not a null pointer, the address of the peer for the
            accepted connection shall be stored in the sockaddr structure pointed
            to by address, and the length of this address shall be stored in the
            object pointed to by address_len.

            If the actual length of the address is greater than the length of the
            supplied sockaddr structure, the stored address shall be truncated.

            If the protocol permits connections by unbound clients, and the peer
            is not bound, then the value stored in the object pointed to by
            address is unspecified.

            If the listen queue is empty of connection requests and O_NONBLOCK is
            not set on the file descriptor for the socket, accept() shall block
            until a connection is present. If the listen() queue is empty of
            connection requests and O_NONBLOCK is set on the file descriptor for
            the socket, accept() shall fail and set errno to [EAGAIN] or
            [EWOULDBLOCK].

            The accepted socket cannot itself accept more connections. The
            original socket remains open and can accept more connections.</tutorial>
    </command>
    <command id = "_Exit" Section="2">
        <description>Terminate the calling process</description>
        <tutorial>The function _exit() terminates the calling process "immediately".
            Any open file descriptors belonging to the process are closed; any
            children of the process are inherited by process 1, init, and the
            process's parent is sent a SIGCHLD signal.

            The value status is returned to the parent process as the process's
            exit status, and can be collected using one of the wait(2) family of
            calls.

            The function _Exit() is equivalent to _exit().
            RETURN VALUE         top

            These functions do not return.</tutorial>
    </command>
    <command id = "intro" Section="6">
        <description>Introduction to games</description>
        <tutorial>This section contains information about games.  The games are located in
            /usr/bin if installed.  You can get a short overview about	all the	games
            with the command:

            $ apropos '\(6\)'

            FILES
            /usr/bin  location	of games</tutorial>
    </command>
    <command id = "devfs" Section="5">
        <description>Device file system</description>
        <tutorial>The device	file system, or	devfs, provides	access to kernel's device
            namespace in the global file system namespace.  The conventional mount
            point is /dev.

            The file system includes several directories, links, symbolic links and
            devices, some of which can	also be	written.  In a chroot'ed environment,
            devfs can be used to create a new /dev mount point.

            The mknod(8) tool can be used to recover deleted device entries under
            devfs.

            The fdescfs(5) filesystem is an alternate means for populating /dev/fd.
            The character devices that	both devfs and fdescfs(5) present in /dev/fd
            correspond	to the open file descriptors of	the process accessing the
            directory.	 devfs only creates files for the standard file	descriptors 0,
            1 and 2.  fdescfs(5) creates files	for all	open descriptors.

            The options are as	follows:

            -o	options
            Use the specified mount options, as described in mount(8).	 The
            following devfs file system-specific options are available:

            ruleset=ruleset
            Set ruleset number	ruleset	as the current ruleset for the
            mount-point and apply all its rules.  If the ruleset num-
            ber ruleset does not exist, an empty ruleset with the
            number ruleset is created.	 See devfs(8) for more infor-
            mation on working with devfs rulesets.</tutorial>
    </command>
    <command id = "symlink" Section="7">
        <description>Symbolic link handling</description>
        <tutorial>Symbolic links are	files that act as pointers to other files.  To under-
            stand their behavior, you must first understand how hard links work.  A
            hard link to a file is indistinguishable from the original	file because
            it	is a reference to the object underlying	the original file name.
            Changes to	a file are independent of the name used	to reference the file.
            Hard links	may not	refer to directories and may not reference files on
            different file systems.  A	symbolic link contains the name	of the file to
            which it is linked, i.e., it is a pointer to another name,	and not	to an
            underlying	object.	 For this reason, symbolic links may reference direc-
            tories and	may span file systems.

            Because a symbolic	link and its referenced	object coexist in the file
            system name space,	confusion can arise in distinguishing between the link
            itself and	the referenced object.	Historically, commands and system
            calls have	adopted	their own link following conventions in	a somewhat ad-
            hoc fashion.  Rules for more a uniform approach, as they are implemented
            in	this system, are outlined here.	 It is important that local applica-
            tions conform to these rules, too,	so that	the user interface can be as
            consistent	as possible.

            Symbolic links are	handled	either by operating on the link	itself,	or by
            operating on the object referenced	by the link.  In the latter case, an
            application or system call	is said	to ``follow'' the link.	 Symbolic
            links may reference other symbolic	links, in which	case the links are
            dereferenced until	an object that is not a	symbolic link is found,	a sym-
            bolic link	which references a file	which does not exist is	found, or a
            loop is detected.	(Loop detection	is done	by placing an upper limit on
            the number	of links that may be followed, and an error results if this
            limit is exceeded.)

            There are three separate areas that need to be discussed.	They are as
            follows:

            1.	Symbolic links used as file name arguments for system calls.
            2.	Symbolic links specified as command line arguments to utili-
            ties that are not traversing a file tree.
            3.	Symbolic links encountered by utilities	that are traversing a
            file tree (either specified on the command line	or encountered
            as part	of the file hierarchy walk).

            System calls.
            The first area is symbolic	links used as file name	arguments for system
            calls.

            Except as noted below, all	system calls follow symbolic links.  For exam-
            ple, if there were	a symbolic link	``slink'' which	pointed	to a file
            named ``afile'', the system call ``open("slink" ...)'' would return a
            file descriptor to	the file ``afile''.

            There are thirteen	system calls that do not follow	links, and which oper-
            ate on the	symbolic link itself.  They are: lchflags(2), lchmod(2),
            lchown(2),	lpathconf(2), lstat(2),	lutimes(2), readlink(2),
            readlinkat(2), rename(2), renameat(2), rmdir(2), unlink(2), and
            unlinkat(2).  Because remove(3) is	an alias for unlink(2),	it also	does
            not follow	symbolic links.	 When rmdir(2) or unlinkat(2) with the
            AT_REMOVEDIR flag is applied to a symbolic	link, it fails with the	error
            ENOTDIR.

            The linkat(2) system call does not	follow symbolic	links unless given the
            AT_SYMLINK_FOLLOW flag.

            The following system calls	follow symbolic	links unless given the
            AT_SYMLINK_NOFOLLOW flag: chflagsat(2), fchmodat(2), fchownat(2),
            fstatat(2)	and utimensat(2).

            The owner and group of an existing	symbolic link can be changed by	means
            of	the lchown(2) system call.  The	flags, access permissions, owner/group
            and modification time of an existing symbolic link	can be changed by
            means of the lchflags(2), lchmod(2), lchown(2), and lutimes(2) system
            calls, respectively.  Of these, only the flags and	ownership are used by
            the system; the access permissions	are ignored.

            The 4.4BSD	system differs from historical 4BSD systems in that the	system
            call chown(2) has been changed to follow symbolic links.  The lchown(2)
            system call was added later when the limitations of the new chown(2)
            became apparent.

            Commands not	traversing a file tree.
            The second	area is	symbolic links,	specified as command line file name
            arguments,	to commands which are not traversing a file tree.

            Except as noted below, commands follow symbolic links named as command
            line arguments.  For example, if there were a symbolic link ``slink''
            which pointed to a	file named ``afile'', the command ``cat	slink''	would
            display the contents of the file ``afile''.

            It	is important to	realize	that this rule includes	commands which may
            optionally	traverse file trees, e.g. the command ``chown file'' is
            included in this rule, while the command ``chown -R file''	is not.	 (The
            latter is described in the	third area, below.)

            If	it is explicitly intended that the command operate on the symbolic
            link instead of following the symbolic link, e.g.,	it is desired that
            ``chown slink'' change the	ownership of the file that ``slink'' is,
            whether it	is a symbolic link or not, the -h option should	be used.  In
            the above example,	``chown	root slink'' would change the ownership	of the
            file referenced by	``slink'', while ``chown -h root slink'' would change
            the ownership of ``slink''	itself.

            There are five exceptions to this rule.  The mv(1)	and rm(1) commands do
            not follow	symbolic links named as	arguments, but respectively attempt to
            rename and	delete them.  (Note, if	the symbolic link references a file
            via a relative path, moving it to another directory may very well cause
            it	to stop	working, since the path	may no longer be correct.)

            The ls(1) command is also an exception to this rule.  For compatibility
            with historic systems (when ls is not doing a tree	walk, i.e., the	-R
            option is not specified), the ls command follows symbolic links named as
            arguments if the -H or -L option is specified, or if the -F, -d or	-l
            options are not specified.	 (The ls command is the	only command where the
            -H	and -L options affect its behavior even	though it is not doing a walk
            of	a file tree.)

            The file(1) and stat(1) commands are also exceptions to this rule.	 These
            commands do not follow symbolic links named as argument by	default, but
            do	follow symbolic	links named as argument	if the -L option is specified.

            The 4.4BSD	system differs from historical 4BSD systems in that the	chown
            and chgrp commands	follow symbolic	links specified	on the command line.

            Commands traversing a file tree.
            The following commands either optionally or always	traverse file trees:
            chflags(1), chgrp(1), chmod(1), cp(1), du(1), find(1), ls(1), pax(1),
            rm(1), tar(1) and chown(8).

            It	is important to	realize	that the following rules apply equally to sym-
            bolic links encountered during the	file tree traversal and	symbolic links
            listed as command line arguments.

            The first rule applies to symbolic	links that reference files that	are
            not of type directory.  Operations	that apply to symbolic links are per-
            formed on the links themselves, but otherwise the links are ignored.

            The command ``rm -r slink directory'' will	remove ``slink'', as well as
            any symbolic links	encountered in the tree	traversal of ``directory'',
            because symbolic links may	be removed.  In	no case	will rm	affect the
            file which	``slink'' references in	any way.

            The second	rule applies to	symbolic links that reference files of type
            directory.	 Symbolic links	which reference	files of type directory	are
            never ``followed''	by default.  This is often referred to as a
            ``physical'' walk,	as opposed to a	``logical'' walk (where	symbolic links
            referencing directories are followed).

            As	consistently as	possible, you can make commands	doing a	file tree walk
            follow any	symbolic links named on	the command line, regardless of	the
            type of file they reference, by specifying	the -H (for ``half-logical'')
            flag.  This flag is intended to make the command line name	space look
            like the logical name space.  (Note, for commands that do not always do
            file tree traversals, the -H flag will be ignored if the -R flag is not
            also specified.)

            For example, the command ``chown -HR user slink'' will traverse the file
            hierarchy rooted in the file pointed to by	``slink''.  Note, the -H is
            not the same as the previously discussed -h flag.	The -H flag causes
            symbolic links specified on the command line to be	dereferenced both for
            the purposes of the action	to be performed	and the	tree walk, and it is
            as	if the user had	specified the name of the file to which	the symbolic
            link pointed.

            As	consistently as	possible, you can make commands	doing a	file tree walk
            follow any	symbolic links named on	the command line, as well as any sym-
            bolic links encountered during the	traversal, regardless of the type of
            file they reference, by specifying	the -L (for ``logical'') flag.	This
            flag is intended to make the entire name space look like the logical name
            space.  (Note, for	commands that do not always do file tree traversals,
            the -L flag will be ignored if the	-R flag	is not also specified.)

            For example, the command ``chown -LR user slink'' will change the owner
            of	the file referenced by ``slink''.  If ``slink''	references a direc-
            tory, chown will traverse the file	hierarchy rooted in the	directory that
            it	references.  In	addition, if any symbolic links	are encountered	in any
            file tree that chown traverses, they will be treated in the same fashion
            as	``slink''.

            As	consistently as	possible, you can specify the default behavior by
            specifying	the -P (for ``physical'') flag.	 This flag is intended to make
            the entire	name space look	like the physical name space.

            For commands that do not by default do file tree traversals, the -H, -L
            and -P flags are ignored if the -R	flag is	not also specified.  In	addi-
            tion, you may specify the -H, -L and -P options more than once; the last
            one specified determines the command's behavior.  This is intended	to
            permit you	to alias commands to behave one	way or the other, and then
            override that behavior on the command line.

            The ls(1) and rm(1) commands have exceptions to these rules.  The rm com-
            mand operates on the symbolic link, and not the file it references, and
            therefore never follows a symbolic	link.  The rm command does not support
            the -H, -L	or -P options.

            To	maintain compatibility with historic systems, the ls command acts a
            little differently.  If you do not	specify	the -F,	-d or -l options, ls
            will follow symbolic links	specified on the command line.	If the -L flag
            is	specified, ls follows all symbolic links, regardless of	their type,
            whether specified on the command line or encountered in the tree walk.</tutorial>
    </command>
</unix>